

# def parse_date(date_string, format='%Y-%m-%d'):
#     if pd.isnull(date_string) or not isinstance(date_string, str) or len(date_string) < 8:
#         return None
#     return datetime.strptime(date_string, format)

def parse_date(date_string, format='%Y-%m-%d', timezone='UTC'):
    if pd.isnull(date_string) or not isinstance(date_string, str) or len(date_string) < 8:
        return None

    # Extract only the date portion using regex
    match = re.match(r'(\d{4}-\d{2}-\d{2})', date_string)
    if match:
        date_string = match.group(1)
    else:
        return None

    naive_dt = datetime.strptime(date_string, format)

    # Attach timezone information to the datetime object
    tz = pytz.timezone(timezone)
    aware_dt = tz.localize(naive_dt)

    return aware_dt


#
# def import_large_csv_diarias(csv_file_path, batch_size=1000):
#     # Define a function to parse date strings
#
#     # Read CSV in chunks using pandas
#     csv_chunks = pd.read_csv(csv_file_path, chunksize=batch_size)
#
#     for chunk in csv_chunks:
#         # Convert the pandas DataFrame chunk to a list of dictionaries
#         records = chunk.to_dict('records')
#
#         # Create a list of DiariasTaxas instances
#         diarias_taxas_list = [
#             DiariaTaxa(
#                 descricao_detalhada=record['Descrição Detalhada do Termo'],
#                 codigo_tuss=record['Código do Termo'],
#                 termo=record['Termo'],
#                 dt_inicio_vigencia=parse_date(record['Data de início de vigência']),
#                 dt_fim_vigencia=parse_date(record['Data de fim de vigência']),
#                 dt_implantacao=parse_date(record['Data de fim de implantação'])
#             )
#             for record in records
#         ]
#
#         # Use Django's bulk_create to insert records in batches
#         with transaction.atomic():
#             DiariaTaxa.objects.bulk_create(diarias_taxas_list)
#
#
# def import_large_csv_medicamento(csv_file_path, batch_size=1000):
#     # Define a function to parse date strings
#     def parse_date(date_string):
#         if pd.isnull(date_string):
#             return None
#         return datetime.strptime(date_string, '%Y-%m-%d')
#
#     # Read CSV in chunks using pandas
#     csv_chunks = pd.read_csv(csv_file_path, chunksize=batch_size)
#
#     for chunk in csv_chunks:
#         # Convert the pandas DataFrame chunk to a list of dictionaries
#         records = chunk.to_dict('records')
#
#         objects_list = [
#             Medicamento(
#                 codigo_tuss=int(record.get('Código do Termo')),
#                 termo=record.get('Termo'),
#                 apresentacao=record.get('Apresentação'),
#                 laboratorio=record.get('Laboratório'),
#                 dt_inicio_vigencia=parse_date(record.get('Data de início de vigência')),
#                 dt_fim_vigencia=parse_date(record.get('Data de fim de vigência')),
#                 dt_implantacao=parse_date(record.get('Data de fim de implantação')),
#                 codigo_anvisa=0 if type(record.get('REGISTRO ANVISA')) is not int else record.get('REGISTRO ANVISA')
#             )
#             for record in records
#         ]
#
#         # Use Django's bulk_create to insert records in batches
#         with transaction.atomic():
#             Medicamento.objects.bulk_create(objects_list)
#
#
# def import_large_csv_procedimento(csv_file_path, batch_size=1000):
#     # Define a function to parse date strings
#     def parse_date(date_string):
#         if pd.isnull(date_string):
#             return None
#         return datetime.strptime(date_string, '%Y-%m-%d')
#
#     # Read CSV in chunks using pandas
#     csv_chunks = pd.read_csv(csv_file_path, chunksize=batch_size)
#
#     for chunk in csv_chunks:
#         # Convert the pandas DataFrame chunk to a list of dictionaries
#         records = chunk.to_dict('records')
#
#         objects_list = [
#             Procedimento(
#                 descricao_detalhada=record['Descrição Detalhada'],
#                 codigo_tuss=record['Código do Termo'],
#                 termo=record['Termo'],
#                 dt_inicio_vigencia=parse_date(record['Data de início de vigência']),
#                 dt_fim_vigencia=parse_date(record['Data de fim de vigência']),
#                 dt_implantacao=parse_date(record['Data de fim de implantação'])
#             )
#
#             for record in records
#         ]
#
#         # Use Django's bulk_create to insert records in batches
#         with transaction.atomic():
#             Procedimento.objects.bulk_create(objects_list)
#
#
# def import_large_csv_material(csv_file_path, batch_size=1000):
#     # Define a function to parse date strings
#     def parse_date(date_string):
#         if pd.isnull(date_string):
#             return None
#         return datetime.strptime(date_string, '%Y-%m-%d')
#
#     # Read CSV in chunks using pandas
#     csv_chunks = pd.read_csv(csv_file_path, chunksize=batch_size)
#
#     for chunk in csv_chunks:
#         # Convert the pandas DataFrame chunk to a list of dictionaries
#         records = chunk.to_dict('records')
#
#         objects_list = [
#             Material(
#                 modelo=record["Modelo"],
#                 fabricante=record["Fabricante"],
#                 codigo_anvisa=record["Registro Anvisa"],
#                 classe_risco=record['NOME TÉCNICO'],
#                 nome_tecnico=record['Classe de Risco'],
#                 codigo_tuss=record['Código do Termo'],
#                 termo=record['Termo'],
#                 dt_inicio_vigencia=parse_date(record['Data de início de vigência']),
#                 dt_fim_vigencia=parse_date(record['Data de fim de vigência']),
#                 dt_implantacao=parse_date(record['Data de fim de implantação'])
#
#             )
#             for record in records
#         ]
#
#         # Use Django's bulk_create to insert records in batches
#         with transaction.atomic():
#             Material.objects.bulk_create(objects_list)
#
